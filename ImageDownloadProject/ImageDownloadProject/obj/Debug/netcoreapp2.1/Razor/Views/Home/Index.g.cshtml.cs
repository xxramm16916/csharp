#pragma checksum "C:\Users\xxramm\csharp\ImageDownloadProject\ImageDownloadProject\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "da27c9214dd3d4519065c5c5d1e6ad1d5edb4402"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"da27c9214dd3d4519065c5c5d1e6ad1d5edb4402", @"/Views/Home/Index.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\xxramm\csharp\ImageDownloadProject\ImageDownloadProject\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
            BeginContext(43, 3155, true);
            WriteLiteral(@"    <div id=""app"" v-cloack>
        <div class=""form-group"" v-for=""(input, index) in $v.inputs.$each.$iter"" :key=""index"">
            <div class=""d-flex flex-row justify-content-between"">
                Введите URL картинки: <input type=""text"" class=""form-control mr-3"" v-model=""input.data.$model"" :class=""input.$error ? 'is-invalid': ''""> 
                <button v-on:click=""inputs.splice(index, 1)"" style=""width:150px"">Удалить поле</button>
            </div>
            <img :src=""input.$error == true ? 'https://i.ytimg.com/vi/KMW-eHIGAE0/maxresdefault.jpg': input.data.$model"" width=""100"" height=""100"">
        </div>
            <button type=""button"" class=""btn btn-primary"" v-on:click=""downloadImage"">Скачать картинки</button>
            <button type=""button"" class=""btn btn-primary"" v-on:click=""addInput"">Добавить поле для URL</button>
    </div>

<script>
    Vue.use(window.vuelidate.default)
    const { required, url } = window.validators

    var app = new Vue({
        el: '#app',
      ");
            WriteLiteral(@"  validations: {
            inputs: {
                required,
                $each: {
                    data: {
                        required,
                        url
                    }
                }
            }
        },

        data: {
            stringPathName: window.location,
            inputs: [{ data: 'https://www.photoschool.kiev.ua/images/easyblog_articles/19/google-search-350.jpg' }, { data: null }]
        },

        methods: {
            downloadImage: async function () {
                let self = this;

                if(self.$v.inputs.$anyError){
                    alert('Ошибка заполнения Url');
                    return;
                }

                for (let i = 0; i < self.inputs.length; i++) {
                    await axios({
                        url: window.location + 'Home/DownloadImage',
                        method: 'GET',
                        params: {
                            url: self.inputs[i].data
    ");
            WriteLiteral(@"                    },
                        responseType: 'blob',
                    }).then((response) => {
                        var fileURL = window.URL.createObjectURL(new Blob([response.data]));
                        var fileLink = document.createElement('a');
                        fileLink.href = fileURL;
                        fileLink.setAttribute('download', 'file.jpg');
                        document.body.appendChild(fileLink);
                        fileLink.click();
                    }).catch((error) => {
                        console.log(error)
                    });
                }
            },

            addInput: function () {
                let self = this;
                self.$v.inputs.$touch();
                self.inputs.push({ data: null });
            },

            removeInput: function () {
                let self = this;
                self.inputs.splice();
            }
        },
        mounted: function() {
            let ");
            WriteLiteral("self = this;\r\n            self.$v.inputs.$touch();\r\n        }\r\n\r\n    });\r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
